
void formVfValues (const volScalarField& iF,List3<scalar>& procVfValues)
{
label cellId = -1;
    forAll(procPairs_, patchI)
    {
        if (procPairs_[patchI] > -1)
        {
            procVfValues[patchI].resize(procWf2_[patchI].size());
            forAll(procVfValues[patchI], faceI)
            {
                procVfValues[patchI][faceI].resize(procWf2_[patchI][faceI].size());
                procVfValues[patchI][faceI] = 0.0; //make values zero
                forAll(myProcPatchCells_[patchI][faceI], cellI)
                {
                    cellId = myProcPatchCells_[patchI][faceI][cellI];
                    procVfValues[patchI][faceI][cellI] = iF.primitiveField()[cellId];
                }
            }
        }
    }

    //Step 1. Send field data to neighbouring processors (non-blocking mode)
//    Pout << procVfValues << endl;
//    Pout << myProcPatchCells_ << endl;
    forAll(procPairs_, procI)
    {
        label procId = neigProcs_[procI];
        label dataSz = 0;

       DynamicList<scalar> locVf;
        if (procPairs_[procI] > -1) //patch proc pair
        {
            forAll(procVfValues[procI], faceI)
            {
                for(
                        label
                        cellI = 0;
                        cellI <= ownEnd_[procI][faceI];
                        cellI++
                    )
                {
                    locVf.append(procVfValues[procI][faceI][cellI]);
                }
            }
        }
        else //corner connected process
        {
            label cellId = -1;
            label addrId = corProcIds_[procId];
            forAll(corCellIds_[addrId], iCellId)
            {
                cellId = corCellIds_[addrId][iCellId];
                locVf.append(iF.primitiveField()[cellId]);
            }
        }
        
        dataSz = locVf.size();
        

        if (dataSz > 0)
        {

           OPstream::write
            (
                Pstream::scheduled, //mode
                procId, //where
                reinterpret_cast<char*>(&(locVf[0])), //what
                sizeof(scalar)*dataSz, //amount
                UPstream::msgType(),
                UPstream::worldComm
            );
        }
    }
    
    //Step 2. Recieve field data from neighbouring processors
    label iCorProc = 0;
    forAll(procPairs_, procI)
    {
        //data size from processor, that is neighbouring through the patch
        label dataSz = 0;
        label nNeiFaceCells = 0;
        label procId = neigProcs_[procI];
        List<scalar> locVf;
        
        if (procPairs_[procI] > -1)
        {
            //calculate data size
            forAll(neiEnd_[procI], iFace)
            {
                nNeiFaceCells = neiEnd_[procI][iFace] - neiStart_[procI][iFace] + 1;
                dataSz += nNeiFaceCells;
            }

            locVf.resize(dataSz);
        }
        else
        {
            const List<Triple<label> >& addr = corAddr_[iCorProc];
            dataSz = addr.size();
            locVf.resize(dataSz);
        }

        if (dataSz > 0)
        {              
            //Pout << "Recieving " << dataSz << " from " << procId << endl;
            IPstream::read
            (
                Pstream::scheduled, //mode
                procId, //from
                reinterpret_cast<char*>(&(locVf[0])), //what
                sizeof(scalar)*dataSz, //amount
                UPstream::msgType(),
                UPstream::worldComm
            );
        }

        if (procPairs_[procI] > -1)
        {
            label iVf = 0;
            forAll(neiStart_[procI], iFace)
            {
                for(
                        label
                        iCell=neiStart_[procI][iFace];
                        iCell<=neiEnd_[procI][iFace];
                        iCell++
                    )
                {
                    procVfValues[procI][iFace][iCell] =
                        locVf[iVf];
                    iVf++;
                }
            }
        }
        else
        {
            label patchNo = -1;
            label faceNo  = -1;
            label cellNo  = -1;
            label offset  = -1;
//            Pout << "Received " << locVf << " fro
            const List<Triple<label> >& addr = corAddr_[iCorProc];

            forAll(addr, iVal)
            {
                patchNo = addr[iVal][0];
                faceNo  = addr[iVal][1];
                cellNo  = addr[iVal][2];

                offset = corStart_[patchNo][faceNo];
                procVfValues[patchNo][faceNo][cellNo+offset] = locVf[iVal];
            }
            iCorProc++;
        }
    } 

}






template<class FieldType>
void formVfValues (const GeometricField<FieldType, fvPatchField, volMesh>& iF,List<List3<scalar>>& procVfValues)
{
    //set values from this domain   
    label cellId = -1;
    label nComps = pTraits<FieldType>::nComponents;

    Info << "enter in FormVfValues" << endl;
    procVfValues.resize(nComps); 
    for(label compI = 0;compI <= nComps-1;compI++)
    {       
        forAll(procPairs_, patchI)
        {
            if (procPairs_[patchI] > -1)
            {
                procVfValues[compI].resize(procVfValues[compI].size()+1);
                procVfValues[compI][patchI].resize(procWf2_[patchI].size());

                forAll(procVfValues[compI][patchI], faceI)
                {
                    procVfValues[compI][patchI][faceI].resize(procWf2_[patchI][faceI].size());
//                    procVfValues[patchI][faceI] = 0.0; //make values zero
                    forAll(procVfValues[compI][patchI][faceI], cellI)
                    {
                        procVfValues[compI][patchI][faceI][cellI] =0.0; //make values zero              

//                        cellId = myProcPatchCells_[patchI][faceI][cellI];
                        procVfValues[compI][patchI][faceI][cellI] = iF.primitiveField()[cellId].component(compI);
                   
                    
                    }
                }
            }
        }
    }
 
//    Info<< procVfValues << endl;
//    Info<< myProcPatchCells_<<endl;
//    Info<< iF.primitiveField() <<endl;
    Info<< "The end of the First Hell Circle" << endl;
    
    //Pout << procVfValues << "PVFV" << endl;
    forAll(procPairs_, procI)
    {
        label procId = neigProcs_[procI];
        label dataSz = 0;
        List<DynamicList<scalar>> locVf;
        locVf.resize(nComps);
        for(label compI = 0;compI <= nComps-1;compI++)
        {   
            if (procPairs_[procI] > -1) //patch proc pair
            {        
                forAll(procVfValues[compI][procI], faceI)
                {
                    for(
                            label
                            cellI = 0;
                            cellI <= ownEnd_[procI][faceI];
                            cellI++
                       )
                    {
                    
                            locVf[compI].append(procVfValues[compI][procI][faceI][cellI]); 
                    }
                }
   
            }

            else //corner connected process
            {
                label cellId = -1;
                label addrId = corProcIds_[procId];
                forAll(corCellIds_[addrId], iCellId)
                {
                    cellId = corCellIds_[addrId][iCellId];
                    locVf[compI].append(iF.primitiveField()[cellId].component(compI));
                }
            }
        }
        //Pout << locVf << endl;
        dataSz = locVf[0].size()*nComps;
        //Pout << dataSz << endl;

        if (dataSz > 0)
        {
            //Pout << "Sending " << dataSz << " scalars to " << procId << endl;
            OPstream::write
            (
                Pstream::scheduled, //mode
                procId, //where
                reinterpret_cast<char*>(&(locVf[0][0])), //what
                sizeof(scalar)*dataSz, //amount
                UPstream::msgType(),
                UPstream::worldComm
            );
        }
    }

    Info << "The end of the Second Hell Cirle" << endl;
    //Step 2. Recieve field data from neighbouring processors
    label iCorProc = 0;
    forAll(procPairs_, procI)
    {
//        data size from processor, that is neighbouring through the patch
        Pout << procI << endl;
        label dataSz = 0;
        label nNeiFaceCells = 0;
        label procId = neigProcs_[procI];
        List<List<scalar>> locVf; 
        locVf.resize(nComps); 
        
        if (procPairs_[procI] > -1)
        {
            //calculate data size
            forAll(neiEnd_[procI], iFace)
            {
                nNeiFaceCells = neiEnd_[procI][iFace] - neiStart_[procI][iFace] + 1;
                dataSz += nNeiFaceCells;
            }
            
            for(label compI = 0;compI <= nComps-1;compI++)
            {
                locVf[compI].resize(dataSz);
            }
        }
        else
        {
            const List<Triple<label> >& addr = corAddr_[iCorProc];
            dataSz = addr.size();
            for(label compI = 0;compI <= nComps-1;compI++)
            {
                locVf[compI].resize(dataSz);
            }
        }
        dataSz = dataSz * nComps;
//        Info << locVf << endl;
//        Info << dataSz << endl;
        if (dataSz > 0)
        {
//            Pout << "ready to recieve" << endl; 
//            Pout << "Recieving " << dataSz << " from " << procId << endl;
            IPstream::read
            (
                Pstream::scheduled, //mode
                procId, //from
                reinterpret_cast<char*>(&(locVf[0][0])), //what
                sizeof(scalar)*dataSz, //amount
                UPstream::msgType(),
                UPstream::worldComm
            );
        }
        Info << "success recieve" << endl;
        for(label compI = 0;compI <= nComps-1;compI++)
        {
            Info << "start reconstr" << endl;
            if (procPairs_[procI] > -1)
            {
                label iVf = 0;
                forAll(neiStart_[procI], iFace)
                {
                    for(
                            label
                            iCell=neiStart_[procI][iFace];
                            iCell<=neiEnd_[procI][iFace];
                            iCell++
                       ) 
                    {
                        procVfValues[compI][procI][iFace][iCell] =
                        locVf[compI][iVf];
                        iVf++;
                    }
                }
            }
            else
            {
                label patchNo = -1;
                label faceNo  = -1;
                label cellNo  = -1;
                label offset  = -1;
          Pout << "Received " << locVf << endl; 

            const List<Triple<label> >& addr = corAddr_[iCorProc];

                forAll(addr, iVal)
                {
                    patchNo = addr[iVal][0];
                    faceNo  = addr[iVal][1];
                    cellNo  = addr[iVal][2];

                    offset = corStart_[patchNo][faceNo];
                    procVfValues[compI][patchNo][faceNo][cellNo+offset] = locVf[compI][iVal];
                }
                iCorProc++;
            
            }
        }
        Pout << "After recieve" << endl;
    }
Pout << "The end of the Third Hell Circle" << endl;
};
